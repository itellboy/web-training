{"version":3,"sources":["pages/InfinityList/style.ts","pages/InfinityList/index.tsx","pages/ImageLazyLoad/style.ts","pages/ImageLazyLoad/Image/style.ts","pages/ImageLazyLoad/Image/index.tsx","pages/ImageLazyLoad/index.tsx","config/router.config.ts","pages/IndexPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["listDefault","Array","from","length","item","index","id","value","Div","styled","div","size","Index","props","useState","list","setList","visitCount","setVisitCount","start","setStart","offsetTop","setOffsetTop","onScroll","useCallback","event","scrollTop","currentTarget","Math","floor","useEffect","ceil","window","innerHeight","slice","min","style","height","className","transform","map","key","src","imgRef","useRef","intersectionObserver","IntersectionObserver","entries","observer","firstEntry","isIntersecting","target","unobserve","setAttribute","current","observe","disconnect","ref","alt","data","routers","name","path","component","InifinityList","Image","to","App","exact","IndexPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50aba747.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const size = 100\nexport const listDefault = Array.from({ length: size }, (item, index) => ({\n  id: index,\n  value: index,\n}))\nexport const liHeight = 50\n\nexport const Div = styled.div`\n  overflow: auto;\n  position: relative;\n  > .placeholder {\n    height: ${size * liHeight}px;\n  }\n  > .list {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    > .li {\n      height: ${liHeight}px;\n      box-sizing: border-box;\n      border-bottom: 2px solid lightcyan;\n      text-align: center;\n      line-height: ${liHeight}px;\n    }\n  }\n`\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { Div, listDefault, liHeight } from './style'\n\ninterface IndexProps {}\n\nconst Index: React.FC<IndexProps> = props => {\n  const [list, setList] = useState<any>(listDefault)\n  const [visitCount, setVisitCount] = useState(0)\n  const [start, setStart] = useState(0)\n  const [offsetTop, setOffsetTop] = useState(0)\n\n  const onScroll = useCallback((event: any) => {\n    const scrollTop = event.currentTarget.scrollTop\n    setStart(Math.floor(scrollTop / liHeight))\n    setOffsetTop(scrollTop - (scrollTop % liHeight))\n  }, [])\n\n  useEffect(() => {\n    setVisitCount(Math.ceil(window.innerHeight / liHeight))\n  }, [])\n\n  useEffect(() => {\n    setList(listDefault.slice(start, Math.min(listDefault.length, start + visitCount)))\n  }, [start, visitCount])\n\n  return (\n    <Div style={{ height: window.innerHeight }} onScroll={onScroll}>\n      <div className=\"placeholder\"></div>\n      <div className=\"list\" style={{ transform: `translateY(${offsetTop}px)` }}>\n        {list.map((item: any) => {\n          return (\n            <div className=\"li\" key={item.id}>\n              {item.value}\n            </div>\n          )\n        })}\n      </div>\n    </Div>\n  )\n}\n\nexport default Index\n","import styled from 'styled-components'\n\nexport const Div = styled.div`\n  /* padding-top: 900px; */\n`\n","import styled from 'styled-components'\n\nexport const Div = styled.div`\n  > .img {\n    display: block;\n    height: 195px;\n    object-fit: cover;\n    margin-bottom: 10px;\n  }\n`\n","import React, { useEffect, useRef } from 'react'\nimport { Div } from './style'\n\ninterface IndexProps {\n  src: string\n}\n\nconst Index: React.FC<IndexProps> = props => {\n  const { src } = props\n  const imgRef = useRef<HTMLImageElement>(null)\n\n  useEffect(() => {\n    const intersectionObserver = new IntersectionObserver((entries, observer) => {\n      const firstEntry = entries[0]\n      const { isIntersecting, target } = firstEntry\n      if (isIntersecting) {\n        observer.unobserve(target)\n        target.setAttribute('src', src)\n      }\n    })\n    if (imgRef.current) {\n      intersectionObserver.observe(imgRef.current)\n    }\n\n    return () => {\n      intersectionObserver.disconnect()\n    }\n  }, [src])\n\n  return (\n    <Div>\n      <img ref={imgRef} className=\"img\" alt=\"\" />\n    </Div>\n  )\n}\n\nexport default Index\n","import React from 'react'\nimport { Div } from './style'\nimport Image from './Image'\n\ninterface IndexProps {}\n\nconst data = Array.from({ length: 100 }, (item, index) => ({\n  id: index,\n  src: 'https://static.pincll.com/5d09cff32ae21.png',\n}))\n\nconst Index: React.FC<IndexProps> = props => {\n  return (\n    <Div>\n      {data.map(item => {\n        const { id, src } = item\n        return <Image src={src} key={id} />\n      })}\n    </Div>\n  )\n}\n\nexport default Index\n","import InifinityList from '../pages/InfinityList'\nimport ImageLazyLoad from '../pages/ImageLazyLoad'\n\nconst routers = [\n  {\n    id: 1,\n    name: '虚拟列表',\n    path: '/infinity-list',\n    component: InifinityList,\n  },\n  {\n    id: 2,\n    name: '图片懒加载',\n    path: '/image-lazy-load',\n    component: ImageLazyLoad,\n  },\n]\n\nexport default routers\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport routers from '../../config/router.config'\n\ninterface IndexProps {}\n\nconst Index: React.FC<IndexProps> = props => {\n  return (\n    <div>\n      {routers.map(item => {\n        const { id, name, path } = item\n        return (\n          <div key={id}>\n            <Link to={path}>{name}</Link>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Index\n","import React from 'react'\nimport { HashRouter, Route } from 'react-router-dom'\nimport IndexPage from './pages/IndexPage'\nimport routers from './config/router.config'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route path=\"/\" exact component={IndexPage} />\n      {routers.map(item => {\n        const { id, path, component } = item\n        return <Route key={id} path={path} exact component={component} />\n      })}\n    </HashRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}